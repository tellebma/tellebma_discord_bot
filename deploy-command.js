/**
 * Ce script met √† jour les commandes Discord.
 * Codes d'erreur :
 *   0 : Commandes mises √† jour avec succ√®s.
 *  10 : Erreur lors de la mise √† jour des commandes.
 *  20 : Probl√®me d'√©criture du fichier.
 */

const { REST, Routes } = require('discord.js');
const fs = require('fs');

const updateFile = process.env.FICHIER_UPDATE_COMMANDE || './.commandeUpToDate';

// V√©rifier que les variables d'environnement requises sont d√©finies
if (!process.env.DISCORD_TOKEN || !process.env.DISCORD_CLIENT_ID) {
    console.error('‚ùå DISCORD_TOKEN ou DISCORD_CLIENT_ID manquant dans les variables d\'environnement.');
    process.exit(1);
}

const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);

// G√©n√©rer un timestamp
const now = new Date();
const timestamp = now.toLocaleString('fr-FR', {
    timeZone: 'Europe/Paris',
    dateStyle: 'short',
    timeStyle: 'short',
});

// Contenu du fichier avec le timestamp
const fileContent = `Fichier g√©n√©r√© automatiquement apr√®s l'ex√©cution du script deploy-command.js. 
Si ce fichier est supprim√©, le script sera relanc√© automatiquement et le contenu des commandes Discord sera mis √† jour.
Date de g√©n√©ration : ${timestamp}`;

// Fonction pour charger les commandes
function loadCommands() {
    const commands = [];
    const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));

    for (const file of commandFiles) {
        const command = require(`./commands/${file}`);
        commands.push(command.data.toJSON());
    }

    return commands;
}

// Fonction pour supprimer toutes les commandes
async function deleteAllCommands() {
    try {
        console.log('üßπ Suppression de toutes les commandes Slash...');
        await rest.put(Routes.applicationCommands(process.env.DISCORD_CLIENT_ID), { body: [] });
        console.log('‚úÖ Toutes les commandes ont √©t√© supprim√©es.');
    } catch (error) {
        console.error('‚ùå Erreur lors de la suppression des commandes Slash :', error);
        process.exit(10);
    }
}

// Fonction pour enregistrer les commandes sur Discord
async function deployCommands(commands) {
    try {
        console.log('üîß Enregistrement des commandes Slash...');
        await rest.put(Routes.applicationCommands(process.env.DISCORD_CLIENT_ID), { body: commands });
        console.log('‚úÖ Commandes Slash d√©ploy√©es avec succ√®s.');
        console.debug(commands);
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'enregistrement des commandes Slash :', error);
        return false;
    }
}

// Fonction pour √©crire le fichier de mise √† jour
function writeUpdateFile(content) {
    try {
        fs.writeFileSync(updateFile, content);
        console.log(`‚úÖ Fichier "${updateFile}" cr√©√© avec succ√®s.`);
        return true;
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du fichier :', error);
        return false;
    }
}

// Main
(async () => {
    

    const commands = loadCommands();
    if (!commands.length) {
        console.error('‚ùå Aucune commande trouv√©e √† d√©ployer.');
        process.exit(10);
    }
    await deleteAllCommands();
    const deploySuccess = await deployCommands(commands);

    if (!deploySuccess) {
        process.exit(10);
    }

    const writeSuccess = writeUpdateFile(fileContent);

    if (!writeSuccess) {
        process.exit(20);
    }

    console.log('üéâ Mise √† jour des commandes termin√©e avec succ√®s.');
    process.exit(0);
})();
